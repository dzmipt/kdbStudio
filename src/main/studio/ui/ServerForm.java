package studio.ui;

import static javax.swing.GroupLayout.Alignment.BASELINE;
import static javax.swing.GroupLayout.Alignment.LEADING;
import static javax.swing.GroupLayout.Alignment.TRAILING;
import static javax.swing.GroupLayout.DEFAULT_SIZE;
import static javax.swing.GroupLayout.PREFERRED_SIZE;
import static javax.swing.LayoutStyle.ComponentPlacement.RELATED;

import java.awt.Color;
import java.awt.Window;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.JColorChooser;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import studio.core.AuthenticationManager;
import studio.core.Credentials;
import studio.kdb.Config;
import studio.kdb.Server;

public class ServerForm extends EscapeDialog {
    private final Server s;

    public ServerForm(Window frame, String title, Server server) {
        super(frame, title);
        s = new Server(server);

        initComponents();

        logicalName.setText(s.getName());
        hostname.setText(s.getHost());
        username.setText(s.getUsername());
        port.setText("" + s.getPort());
        password.setText(s.getPassword());
        useTls.setSelected(s.getUseTLS());
        DefaultComboBoxModel dcbm = (DefaultComboBoxModel) authenticationMechanism.getModel();
        String[] am;
        am = AuthenticationManager.getInstance().getAuthenticationMechanisms();
        for (int i = 0; i < am.length; i++) {
            dcbm.addElement(am[i]);
            if (s.getAuthenticationMechanism().equals(am[i])) {
                dcbm.setSelectedItem(am[i]);
            }
        }

        authenticationMechanism.addItemListener(e -> {
            String auth = authenticationMechanism.getSelectedItem().toString();
            Credentials credentials = Config.getInstance().getDefaultCredentials(auth);
            username.setText(credentials.getUsername());
            password.setText(credentials.getPassword());
        });

        logicalName.setToolTipText("The logical name for the server");
        hostname.setToolTipText("The hostname or ip address for the server");
        port.setToolTipText("The port for the server");
        useTls.setToolTipText("Use TLS for a secure connection");
        username.setToolTipText("The username used to connect to the server");
        password.setToolTipText("The password used to connect to the server");
        authenticationMechanism.setToolTipText("The authentication mechanism to use");

//        testConnection.setSelected(true);

        sampleTextOnBackgroundTextField.setBackground(s.getBackgroundColor());
        sampleTextOnBackgroundTextField.setEditable(false);
        addWindowListener(new WindowAdapter() {
            public void windowOpened(WindowEvent e) {
                logicalName.requestFocus();
            }
        });
        getRootPane().setDefaultButton(okButton);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    //
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JLabel logicalNameLabel = new javax.swing.JLabel();
        logicalName = new javax.swing.JTextField();
        javax.swing.JLabel hostnameLabel = new javax.swing.JLabel();
        hostname = new javax.swing.JTextField();
        javax.swing.JLabel portLabel = new javax.swing.JLabel();
        port = new javax.swing.JTextField();
        javax.swing.JLabel usernameLabel = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        javax.swing.JLabel passwordLabel = new javax.swing.JLabel();
        okButton = new javax.swing.JButton();
        javax.swing.JButton cancelButton = new javax.swing.JButton();
        javax.swing.JSeparator jSeparator1 = new javax.swing.JSeparator();
        javax.swing.JSeparator jSeparator2 = new javax.swing.JSeparator();
        password = new javax.swing.JPasswordField();
        javax.swing.JLabel colorLabel = new javax.swing.JLabel();
        javax.swing.JSeparator jSeparator3 = new javax.swing.JSeparator();
        // Variables declaration - do not modify//GEN-BEGIN:variables
        javax.swing.JButton editColorButton = new javax.swing.JButton();
        sampleTextOnBackgroundTextField = new javax.swing.JTextField();
        authenticationMechanism = new javax.swing.JComboBox();
        javax.swing.JLabel authMethodLabel = new javax.swing.JLabel();
        useTls = new javax.swing.JCheckBox();
        javax.swing.JLabel tlsLabel = new javax.swing.JLabel();

        logicalNameLabel.setText("Name");

        hostnameLabel.setText("Host");

        portLabel.setText("Port");

        usernameLabel.setText("Username");

        passwordLabel.setText("Password");

        okButton.setText("Ok");
        okButton.addActionListener(this::onOk);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(this::onCancel);

        colorLabel.setText("Color");

        editColorButton.setText("Edit Color");
        editColorButton.addActionListener(this::onColor);

        sampleTextOnBackgroundTextField.setText("Sample text on background");
        sampleTextOnBackgroundTextField.addActionListener(
            this::sampleTextOnBackgroundTextFieldActionPerformed);

        authMethodLabel.setText("Auth. Method");

        tlsLabel.setText("Use TLS");

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(LEADING)
                        .addComponent(logicalNameLabel)
                        .addComponent(hostnameLabel)
                        .addComponent(portLabel)
                        .addComponent(tlsLabel)
                        .addComponent(usernameLabel)
                        .addComponent(passwordLabel)
                        .addComponent(authMethodLabel)
                        .addComponent(colorLabel))
                    .addPreferredGap(RELATED, 21, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(editColorButton)
                            .addPreferredGap(RELATED, DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cancelButton)
                            .addPreferredGap(RELATED)
                            .addComponent(okButton)
                            .addGap(6, 6, 6))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(LEADING)
                                .addComponent(sampleTextOnBackgroundTextField, DEFAULT_SIZE, 418,
                                    Short.MAX_VALUE)
                                .addComponent(authenticationMechanism, 0, 418, Short.MAX_VALUE)
                                .addComponent(password, DEFAULT_SIZE, 418, Short.MAX_VALUE)
                                .addComponent(username, DEFAULT_SIZE, 418, Short.MAX_VALUE)
                                .addComponent(useTls)
                                .addComponent(port, DEFAULT_SIZE, 418, Short.MAX_VALUE)
                                .addComponent(hostname, DEFAULT_SIZE, 418, Short.MAX_VALUE)
                                .addComponent(logicalName, DEFAULT_SIZE, 418, Short.MAX_VALUE))
                            .addContainerGap())))
                .addGroup(TRAILING, layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(LEADING)
                        .addGroup(TRAILING, layout.createSequentialGroup()
                            .addContainerGap(45, Short.MAX_VALUE)
                            .addComponent(jSeparator2, DEFAULT_SIZE, 471, Short.MAX_VALUE))
                        .addGroup(TRAILING, layout.createSequentialGroup()
                            .addContainerGap(45, Short.MAX_VALUE)
                            .addComponent(jSeparator3, DEFAULT_SIZE, 471, Short.MAX_VALUE))
                        .addGroup(TRAILING, layout.createSequentialGroup()
                            .addContainerGap(45, Short.MAX_VALUE)
                            .addComponent(jSeparator1, DEFAULT_SIZE, 471, Short.MAX_VALUE)))
                    .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap(DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(BASELINE)
                        .addComponent(logicalNameLabel)
                        .addComponent(logicalName, PREFERRED_SIZE, DEFAULT_SIZE, PREFERRED_SIZE))
                    .addPreferredGap(RELATED)
                    .addComponent(jSeparator1, PREFERRED_SIZE, 10, PREFERRED_SIZE)
                    .addPreferredGap(RELATED)
                    .addGroup(layout.createParallelGroup(BASELINE)
                        .addComponent(hostnameLabel)
                        .addComponent(hostname, PREFERRED_SIZE, DEFAULT_SIZE, PREFERRED_SIZE))
                    .addPreferredGap(RELATED)
                    .addGroup(layout.createParallelGroup(BASELINE)
                        .addComponent(portLabel)
                        .addComponent(port, PREFERRED_SIZE, DEFAULT_SIZE, PREFERRED_SIZE))
                    .addPreferredGap(RELATED)
                    .addGroup(layout.createParallelGroup(LEADING)
                        .addComponent(tlsLabel, TRAILING)
                        .addComponent(useTls, TRAILING))
                    .addPreferredGap(RELATED)
                    .addComponent(jSeparator2, PREFERRED_SIZE, 10, PREFERRED_SIZE)
                    .addPreferredGap(RELATED)
                    .addGroup(layout.createParallelGroup(BASELINE)
                        .addComponent(usernameLabel)
                        .addComponent(username, PREFERRED_SIZE, DEFAULT_SIZE, PREFERRED_SIZE))
                    .addPreferredGap(RELATED)
                    .addGroup(layout.createParallelGroup(BASELINE, false)
                        .addComponent(passwordLabel)
                        .addComponent(password, PREFERRED_SIZE, DEFAULT_SIZE, PREFERRED_SIZE))
                    .addPreferredGap(RELATED)
                    .addGroup(layout.createParallelGroup(BASELINE)
                        .addComponent(authenticationMechanism, PREFERRED_SIZE, DEFAULT_SIZE,
                            PREFERRED_SIZE)
                        .addComponent(authMethodLabel))
                    .addPreferredGap(RELATED)
                    .addComponent(jSeparator3, PREFERRED_SIZE, 10, PREFERRED_SIZE)
                    .addPreferredGap(RELATED)
                    .addGroup(layout.createParallelGroup(BASELINE)
                        .addComponent(colorLabel)
                        .addComponent(sampleTextOnBackgroundTextField, PREFERRED_SIZE, DEFAULT_SIZE,
                            PREFERRED_SIZE))
                    .addPreferredGap(RELATED)
                    .addGroup(layout.createParallelGroup(BASELINE)
                        .addComponent(okButton)
                        .addComponent(cancelButton)
                        .addComponent(editColorButton))
                    .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void onOk(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onOk
        logicalName.setText(logicalName.getText().trim());
        hostname.setText(hostname.getText().trim());
        username.setText(username.getText().trim());
        port.setText(port.getText().trim());
        password.setText(new String(password.getPassword()).trim());

        if (logicalName.getText().length() == 0) {
            StudioOptionPane.showMessageDialog(this,
                "The server's name cannot be empty",
                "Studio for kdb+",
                JOptionPane.ERROR_MESSAGE);
            logicalName.requestFocus();
            return;
        }

        boolean clash = false;
        if (clash) {
            StudioOptionPane.showMessageDialog(this,
                "A server already exists with that name.",
                "Studio for kdb+",
                JOptionPane.ERROR_MESSAGE);
            logicalName.requestFocus();
            return;
        } else {
            s.setName(logicalName.getText().trim());
            s.setHost(hostname.getText().trim());
            s.setUsername(username.getText().trim());
            if (port.getText().length() == 0) {
                s.setPort(0);
            } else {
                s.setPort(Integer.parseInt(port.getText()));
            }

            s.setPassword(new String(password.getPassword()).trim());
            s.setUseTLS(useTls.isSelected());
            DefaultComboBoxModel dcbm = (DefaultComboBoxModel) authenticationMechanism.getModel();
            s.setAuthenticationMechanism((String) dcbm.getSelectedItem());


      /*      if( testConnection.isSelected())
            {
                c c= null;
                try
                {
                    c=new c(s.getHost(),s.getPort(),s.getUsername());
                    c.reconnect();
                }
                catch(k4.c.K4Exception e)
                {
                    StudioOptionPane.showMessageDialog(this,
                                                  "Failed to connect due to invalid username or password.",
                                                  "Studio for kdb+",
                                                  JOptionPane.ERROR_MESSAGE);
                }
                catch(IOException e)
                {
                    StudioOptionPane.showMessageDialog(this,
                              "Failed to connect due to network error : " + e.getMessage(),
                              "Studio for kdb+",
                              JOptionPane.ERROR_MESSAGE);
                }
                finally
                {
                    if( c != null)
                        try{c.close();}catch(Exception e){};
                }
            }
*/
        }
        accept();
    }//GEN-LAST:event_onOk


    public Server getServer() {
        return s;
    }

    private void onCancel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onCancel
        cancel();
    }//GEN-LAST:event_onCancel

    Color c;

    private void onColor(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onColor
        final JColorChooser chooser = new JColorChooser();
        //      chooser.setPreviewPanel(new CustomPane());
        c = sampleTextOnBackgroundTextField.getBackground();

        JDialog dialog = JColorChooser.createDialog(this,
            "Select background color for editor", true, chooser, e -> c = chooser.getColor(), null);

        dialog.setVisible(true);

        sampleTextOnBackgroundTextField.setBackground(c);
        s.setBackgroundColor(c);
    }//GEN-LAST:event_onColor

    private void sampleTextOnBackgroundTextFieldActionPerformed(
        java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SampleTextOnBackgroundTextFieldActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_SampleTextOnBackgroundTextFieldActionPerformed


    private javax.swing.JTextField sampleTextOnBackgroundTextField;
    private javax.swing.JComboBox authenticationMechanism;
    private javax.swing.JTextField hostname;
    private javax.swing.JCheckBox useTls;
    private javax.swing.JTextField logicalName;
    private javax.swing.JButton okButton;
    private javax.swing.JPasswordField password;
    private javax.swing.JTextField port;
    private javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables

}
