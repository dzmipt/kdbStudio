import java.text.SimpleDateFormat

apply plugin: 'idea'
//and standard one
apply plugin: 'java'
apply plugin: 'application'

apply plugin: 'maven-publish'
apply plugin: 'signing'

group = "com.github.dzmipt"
archivesBaseName = "kdbStudio"
version = "dz5.0"

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_9
    targetCompatibility = JavaVersion.VERSION_1_9
}

repositories {
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDirs 'src'
        }
        resources {
            srcDirs 'src','images','imagesOrig'
            include 'log4j2.xml'
            include 'studio*.properties'
            include '*.png'
            include '*.gif'
            include 'notes.html'
            include 'build.txt'
        }
    }
    test {
        java {
            srcDirs 'test'
        }
        resources {
            srcDirs 'test'
            include 'syntax.csv'
            include 'studio13.properties'
            include 'studio14.properties'
        }
    }
    intTest {
        java {
            srcDirs 'test-integration'
        }
        resources {
            srcDirs 'test-resources'
        }
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
}

configurations {
    txtmark
    intTestImplementation.extendsFrom implementation
    intTestRunimeOnly.extendsFrom runtimeOnly
    intTestCompileOnly.extendsFrom compileOnly
}

dependencies {
    txtmark group: 'com.github.rjeschke', name: 'txtmark', version: '0.13'

    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.20.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.20.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-iostreams', version: '2.20.0'

    implementation group: 'com.fifesoft', name: 'rsyntaxtextarea', version: '3.5.1'
    //see studio.ui.chart.patched folder for the patch for jfreechart.
    // It will require review during the jfreechart upgrade.
    implementation group: 'org.jfree', name: 'jfreechart', version: '1.5.3'
    implementation group: 'org.apache.poi', name: 'poi', version: '5.2.4'
    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '5.2.4'
    implementation group: 'org.drjekyll', name: 'fontchooser', version: '2.4'
    implementation group: 'net.java.dev.jna', name: 'jna', version: '5.10.0'
    implementation group: 'org.drjekyll', name: 'fontchooser', version: '2.5.2'

    implementation group: 'com.google.code.gson', name: 'gson', version: '2.11.0'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.10.0'
    testImplementation group: 'org.junit.jupiter', name:'junit-jupiter-params', version: '5.10.0'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.10.0'

    intTestImplementation group: 'org.assertj', name: 'assertj-swing-junit', version: '3.17.1'
}

test {
    useJUnitPlatform()
}

task integrationTest(type: Test, dependsOn: build) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
}

application {
    mainClass = 'studio.core.Studio'
}

def buildTime() {
    def df = new SimpleDateFormat("yyyy.MM.dd HH:mm:ss")
    return df.format(new Date())
}

def getGitRevNumber = { ->
    def stdout = new ByteArrayOutputStream()
    def errout = new ByteArrayOutputStream()
    def hash = ""
    def rev = ""
    try {
        exec {
            commandLine 'git', 'rev-list', '--count', 'HEAD'
            standardOutput = stdout
            errorOutput = errout
        }
        rev = stdout.toString().trim()

        stdout.reset()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
            errorOutput = errout
        }
        hash = stdout.toString().trim()

    } catch (Throwable e) {
        println "Error getting git revision: " + e
        println errout.toString()
    }

    if (hash == "" || rev == "") return "";
    return ", commit number: $rev, hash: $hash"
}

task getBuildHash {
    doLast {
        file("src/build.txt").text = buildTime() + getGitRevNumber()
    }
}

task convertNotes (type: JavaExec) {
    mainClass = 'com.github.rjeschke.txtmark.Run'
    classpath = configurations.txtmark
    args 'notes.md'
    standardOutput new FileOutputStream(new File(projectDir,"src/notes.html"))
}

processResources.dependsOn('getBuildHash', 'convertNotes')

task sourcesJar(type: Jar) {
    classifier = 'sources'
    duplicatesStrategy = 'warn'
    from sourceSets.main.allSource
}

javadoc {
    failOnError = false
}

javadoc.options.addStringOption('Xdoclint:none', '-quiet')

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

java {
    withJavadocJar()
    withSourcesJar()
}

def pubUsername = project.findProperty("ossrhUsername") ?: ""
def pubPassword = project.findProperty("ossrhPassword") ?: ""

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'Studio for kdb+'
                packaging = 'jar'
                // optionally artifactId can be defined here
                description = 'Studio for kdb+ is a rapid development environment for the ultra-fast database kdb+ from Kx Systems: http://www.kx.com.'
                url = 'https://github.com/dzmipt/kdbStudio'

                scm {
                    connection = 'git@github.com:dzmipt/kdbStudio.git'
                    developerConnection = 'git@github.com:dzmipt/kdbStudio.git'
                    url = 'https://github.com/dzmipt/kdbStudio'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'dzmipt'
                        name = 'Dmitry Zakharov'
                        email = 'dz.mipt@gmail.com'
                    }
                }
            }
        }
    }
    repositories {
        if(project.version.endsWith('-SNAPSHOT')) {
            maven {
                url "https://oss.sonatype.org/content/repositories/snapshots/"
                mavenContent {
                    snapshotsOnly()
                }
                credentials {
                    username pubUsername
                    password pubPassword
                }
                authentication {
                    basic(BasicAuthentication)
                }
            }
        } else {
            maven {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                mavenContent {
                    releasesOnly()
                }
                credentials {
                    username pubUsername
                    password pubPassword
                }
                authentication {
                    basic(BasicAuthentication)
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}
